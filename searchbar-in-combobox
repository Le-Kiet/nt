<template>
  <section class="dropdown-wrapper">
    <div @click="isVisible = !isVisible" class="selected-item">
      <span v-if="selectedItem">{{ selectedItem.name }}</span>
      <span v-else>Selected User</span>
      <svg
        class="drop-down-icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          d="M11.9997 10.8284L7.04996 15.7782L5.63574 14.364L11.9997 8L18.3637 14.364L16.9495 15.7782L11.9997 10.8284Z"
        ></path>
      </svg>
    </div>
    <div v-if="isVisible" class="dropdown-popover">
      <input v-model="searchQuery" type="text" placeholder="SeachBox" />
      <div class="options">
        <ul>
          <li
            v-for="(user, index) in filteredUser"
            @click="selectItem(user)"
            :key="`user-${index}`"
          >
            {{ user.name }}
          </li>
        </ul>
      </div>
    </div>
  </section>
</template>

<!-- <script lang="ts" setup>
import { ref, onMounted } from "vue";
import employeed_data from "~/data/mockup.json";
const show_search_bar = ref(false);
console.log(show_search_bar);
const employee: any = employeed_data.employee_data;
console.log(employee.name);
const tab: any = ref(null);
const subTab: any = ref(null);
//asdasdas
const searchQuery = ref("");
const selectedItem = ref(null);
const isVisible = ref(false);
const userArray = ref([]);
onMounted(() => {
  fetch("https://jsonplaceholder.typicode.com/users")
    .then((res) => res.json())
    .then((json) => {
      console.log(json);
      ref.$rel.userArray = json;
    });
});
</script> -->
<script>
export default {
  data() {
    return {
      searchQuery: "",
      selectedItem: null,
      isVisible: false,
      userArray: [],
    };
  },
  computed: {
    filteredUser() {
      const query = this.searchQuery.toLowerCase();
      if (this.searchQuery === "") {
        return this.userArray;
      }
      return this.userArray.filter((user) => {
        return Object.values(user).some((word) =>
          String(word).toLowerCase().includes(query)
        );
      });
    },
  },
  methods: {
    selectItem(user) {
      this.selectedItem = user;
      this.isVisible = false;
    },
  },
  mounted() {
    fetch();
    fetch("https://jsonplaceholder.typicode.com/users")
      .then((res) => res.json())
      .then((json) => {
        console.log(json);
        this.userArray = json;
      });
  },
};
</script>
<style lang="sass">
.dropdown-wrapper
  max-width: 350px
  position: relative
  margin: 0 auto
  .selected-item
    height: 40px
    border: 2px solid black
    border-radius: 12px
    padding: 5px 10px
    display: flex
    justify-content: space-between
    align-item: center
    font-size: 20px
    font-weight: 500
  .dropdown-popover
    position: absolute
    border: 2px solid green
    top: 46px
    left: 0
    right: 0
    background-color: #fff
    width: 100%


    input
      width: 100%
      height: 30px
      border: 2px solid blue
      font-size: 16px
      padding-left: 5px
    .options
      width: 100%

      ul
        padding-left:6px
        max-height: 200px
        overflow-y: scroll
        border: 3px solid purple
        li
          width: 100%
          border-bottom: 1px solid pink
          padding:10px
          background-color: #f1f1f1
          cursor: pointer
          font-size: 16px
          &:hover
            background: #fff
            font-weight: bold
</style>
